// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_examen.datacleaning_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: dataCleaning Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class dataCleaning implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dataCleaning";
	private final String projectName = "PROJET_EXAMEN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dataCleaning.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dataCleaning.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		public Integer rank;

		public Integer getRank() {
			return this.rank;
		}

		public String grade;

		public String getGrade() {
			return this.grade;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

					this.grade = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

					this.grade = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

				// String

				writeString(this.grade, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

				// String

				writeString(this.grade, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append(",rank=" + String.valueOf(rank));
			sb.append(",grade=" + grade);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		public Integer rank;

		public Integer getRank() {
			return this.rank;
		}

		public String grade;

		public String getGrade() {
			return this.grade;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

					this.grade = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

					this.grade = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

				// String

				writeString(this.grade, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

				// String

				writeString(this.grade, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append(",rank=" + String.valueOf(rank));
			sb.append(",grade=" + grade);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		public Integer rank;

		public Integer getRank() {
			return this.rank;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

					this.rank = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

				// Integer

				writeInteger(this.rank, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append(",rank=" + String.valueOf(rank));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		public Double average;

		public Double getAverage() {
			return this.average;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.average = null;
					} else {
						this.average = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

				// Double

				if (this.average == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.average);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append(",average=" + String.valueOf(average));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public Integer math_score;

		public Integer getMath_score() {
			return this.math_score;
		}

		public Integer reading_score;

		public Integer getReading_score() {
			return this.reading_score;
		}

		public Integer writing_score;

		public Integer getWriting_score() {
			return this.writing_score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readInteger(dis);

					this.reading_score = readInteger(dis);

					this.writing_score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// Integer

				writeInteger(this.math_score, dos);

				// Integer

				writeInteger(this.reading_score, dos);

				// Integer

				writeInteger(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + String.valueOf(math_score));
			sb.append(",reading_score=" + String.valueOf(reading_score));
			sb.append(",writing_score=" + String.valueOf(writing_score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public String math_score;

		public String getMath_score() {
			return this.math_score;
		}

		public String reading_score;

		public String getReading_score() {
			return this.reading_score;
		}

		public String writing_score;

		public String getWriting_score() {
			return this.writing_score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readString(dis);

					this.reading_score = readString(dis);

					this.writing_score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readString(dis);

					this.reading_score = readString(dis);

					this.writing_score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// String

				writeString(this.math_score, dos);

				// String

				writeString(this.reading_score, dos);

				// String

				writeString(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// String

				writeString(this.math_score, dos);

				// String

				writeString(this.reading_score, dos);

				// String

				writeString(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + math_score);
			sb.append(",reading_score=" + reading_score);
			sb.append(",writing_score=" + writing_score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_EXAMEN_dataCleaning = new byte[0];
		static byte[] commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[0];

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String ethnicity;

		public String getEthnicity() {
			return this.ethnicity;
		}

		public String parental_level_of_education;

		public String getParental_level_of_education() {
			return this.parental_level_of_education;
		}

		public String lunch;

		public String getLunch() {
			return this.lunch;
		}

		public String test_preparation_course;

		public String getTest_preparation_course() {
			return this.test_preparation_course;
		}

		public String math_score;

		public String getMath_score() {
			return this.math_score;
		}

		public String reading_score;

		public String getReading_score() {
			return this.reading_score;
		}

		public String writing_score;

		public String getWriting_score() {
			return this.writing_score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_EXAMEN_dataCleaning.length) {
					if (length < 1024 && commonByteArray_PROJET_EXAMEN_dataCleaning.length == 0) {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[1024];
					} else {
						commonByteArray_PROJET_EXAMEN_dataCleaning = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length);
				strReturn = new String(commonByteArray_PROJET_EXAMEN_dataCleaning, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readString(dis);

					this.reading_score = readString(dis);

					this.writing_score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_EXAMEN_dataCleaning) {

				try {

					int length = 0;

					this.gender = readString(dis);

					this.ethnicity = readString(dis);

					this.parental_level_of_education = readString(dis);

					this.lunch = readString(dis);

					this.test_preparation_course = readString(dis);

					this.math_score = readString(dis);

					this.reading_score = readString(dis);

					this.writing_score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// String

				writeString(this.math_score, dos);

				// String

				writeString(this.reading_score, dos);

				// String

				writeString(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.ethnicity, dos);

				// String

				writeString(this.parental_level_of_education, dos);

				// String

				writeString(this.lunch, dos);

				// String

				writeString(this.test_preparation_course, dos);

				// String

				writeString(this.math_score, dos);

				// String

				writeString(this.reading_score, dos);

				// String

				writeString(this.writing_score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender=" + gender);
			sb.append(",ethnicity=" + ethnicity);
			sb.append(",parental_level_of_education=" + parental_level_of_education);
			sb.append(",lunch=" + lunch);
			sb.append(",test_preparation_course=" + test_preparation_course);
			sb.append(",math_score=" + math_score);
			sb.append(",reading_score=" + reading_score);
			sb.append(",writing_score=" + writing_score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outStruct out = new outStruct();
				out1Struct out1 = new out1Struct();
				out2Struct out2 = new out2Struct();
				out3Struct out3 = new out3Struct();
				out4Struct out4 = new out4Struct();
				row2Struct row2 = new row2Struct();
				out5Struct out5 = new out5Struct();
				out6Struct out6 = new out6Struct();
				out6Struct row3 = out6;

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out4");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparableout4Struct extends out4Struct implements Comparable<Comparableout4Struct> {

					public int compareTo(Comparableout4Struct other) {

						if (this.average == null && other.average != null) {
							return 1;

						} else if (this.average != null && other.average == null) {
							return -1;

						} else if (this.average != null && other.average != null) {
							if (!this.average.equals(other.average)) {
								return other.average.compareTo(this.average);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparableout4Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparableout4Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out3");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/MSI/Desktop/BigData Project/inputdata/StudentsPerformance.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/MSI/Desktop/BigData Project/inputdata/StudentsPerformance.csv", "US-ASCII",
								",", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.gender = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.ethnicity = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.parental_level_of_education = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.lunch = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.test_preparation_course = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.math_score = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.reading_score = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.writing_score = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out = null;

// # Output table : 'out'
								out_tmp.gender = row1.gender.replaceAll("\"", "").trim();
								out_tmp.ethnicity = row1.ethnicity.replaceAll("\"", "").trim();
								out_tmp.parental_level_of_education = row1.parental_level_of_education
										.replaceAll("\"", "").trim();
								out_tmp.lunch = row1.lunch.replaceAll("\"", "").trim();
								out_tmp.test_preparation_course = row1.test_preparation_course.replaceAll("\"", "")
										.trim();
								out_tmp.math_score = row1.math_score.replaceAll("\"", "").trim();
								out_tmp.reading_score = row1.reading_score.replaceAll("\"", "").trim();
								out_tmp.writing_score = row1.writing_score.replaceAll("\"", "").trim();
								out = out_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "out"
							if (out != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "out"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

// # Output table : 'out1'
									out1_tmp.gender = out.gender;
									out1_tmp.ethnicity = out.ethnicity;
									out1_tmp.parental_level_of_education = out.parental_level_of_education;
									out1_tmp.lunch = out.lunch;
									out1_tmp.test_preparation_course = out.test_preparation_course;
									out1_tmp.math_score = out.math_score != null && out.math_score.matches("\\d+")
											? Integer.parseInt(out.math_score)
											: null;
									out1_tmp.reading_score = out.reading_score != null
											&& out.reading_score.matches("\\d+") ? Integer.parseInt(out.reading_score)
													: null;
									out1_tmp.writing_score = out.writing_score != null
											&& out.writing_score.matches("\\d+") ? Integer.parseInt(out.writing_score)
													: null;
									out1 = out1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "out1"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										out2 = null;

// # Output table : 'out2'
										out2_tmp.gender = out1.gender;
										out2_tmp.ethnicity = out1.ethnicity.replaceAll("group ", "").trim();
										out2_tmp.parental_level_of_education = out1.parental_level_of_education;
										out2_tmp.lunch = out1.lunch;
										out2_tmp.test_preparation_course = out1.test_preparation_course.trim()
												.equalsIgnoreCase("none")
														? "Not Completed"
														: (out1.test_preparation_course.trim()
																.equalsIgnoreCase("completed") ? "Completed"
																		: out1.test_preparation_course);
										out2_tmp.math_score = out1.math_score;
										out2_tmp.reading_score = out1.reading_score;
										out2_tmp.writing_score = out1.writing_score;
										out2 = out2_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
// Start of branch "out2"
									if (out2 != null) {

										/**
										 * [tMap_4 main ] start
										 */

										currentComponent = "tMap_4";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "out2"

											);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_4 = false;
										boolean mainRowRejected_tMap_4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
											// ###############################
											// # Output tables

											out3 = null;

// # Output table : 'out3'
											out3_tmp.gender = out2.gender.trim().equalsIgnoreCase("male") ? "M"
													: out2.gender.trim().equalsIgnoreCase("female") ? "F" : null;
											out3_tmp.ethnicity = out2.ethnicity.trim().equals("A") ? "Asian"
													: out2.ethnicity.trim().equals("B") ? "Black"
															: out2.ethnicity.trim().equals("C") ? "Hispanic"
																	: out2.ethnicity.trim().equals("D") ? "White"
																			: out2.ethnicity.trim().equals("E")
																					? "Native American"
																					: null;
											out3_tmp.parental_level_of_education = out2.parental_level_of_education;
											out3_tmp.lunch = out2.lunch;
											out3_tmp.test_preparation_course = out2.test_preparation_course;
											out3_tmp.math_score = out2.math_score;
											out3_tmp.reading_score = out2.reading_score;
											out3_tmp.writing_score = out2.writing_score;
											out3 = out3_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_4 = false;

										tos_count_tMap_4++;

										/**
										 * [tMap_4 main ] stop
										 */

										/**
										 * [tMap_4 process_data_begin ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_begin ] stop
										 */
// Start of branch "out3"
										if (out3 != null) {

											/**
											 * [tMap_5 main ] start
											 */

											currentComponent = "tMap_5";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "out3"

												);
											}

											boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_5 = false;
											boolean mainRowRejected_tMap_5 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
												// ###############################
												// # Output tables

												out4 = null;

// # Output table : 'out4'
												out4_tmp.gender = out3.gender;
												out4_tmp.ethnicity = out3.ethnicity;
												out4_tmp.parental_level_of_education = out3.parental_level_of_education;
												out4_tmp.lunch = out3.lunch;
												out4_tmp.test_preparation_course = out3.test_preparation_course;
												out4_tmp.math_score = out3.math_score;
												out4_tmp.reading_score = out3.reading_score;
												out4_tmp.writing_score = out3.writing_score;
												out4_tmp.average = new java.math.BigDecimal(((double) (out3.math_score
														+ out3.reading_score + out3.writing_score) / 3))
																.setScale(2, java.math.RoundingMode.HALF_UP)
																.doubleValue();
												out4 = out4_tmp;
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_5 = false;

											tos_count_tMap_5++;

											/**
											 * [tMap_5 main ] stop
											 */

											/**
											 * [tMap_5 process_data_begin ] start
											 */

											currentComponent = "tMap_5";

											/**
											 * [tMap_5 process_data_begin ] stop
											 */
// Start of branch "out4"
											if (out4 != null) {

												/**
												 * [tSortRow_1_SortOut main ] start
												 */

												currentVirtualComponent = "tSortRow_1";

												currentComponent = "tSortRow_1_SortOut";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1

															, "out4"

													);
												}

												Comparableout4Struct arrayRowtSortRow_1_SortOut = new Comparableout4Struct();

												arrayRowtSortRow_1_SortOut.gender = out4.gender;
												arrayRowtSortRow_1_SortOut.ethnicity = out4.ethnicity;
												arrayRowtSortRow_1_SortOut.parental_level_of_education = out4.parental_level_of_education;
												arrayRowtSortRow_1_SortOut.lunch = out4.lunch;
												arrayRowtSortRow_1_SortOut.test_preparation_course = out4.test_preparation_course;
												arrayRowtSortRow_1_SortOut.math_score = out4.math_score;
												arrayRowtSortRow_1_SortOut.reading_score = out4.reading_score;
												arrayRowtSortRow_1_SortOut.writing_score = out4.writing_score;
												arrayRowtSortRow_1_SortOut.average = out4.average;
												list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

												tos_count_tSortRow_1_SortOut++;

												/**
												 * [tSortRow_1_SortOut main ] stop
												 */

												/**
												 * [tSortRow_1_SortOut process_data_begin ] start
												 */

												currentVirtualComponent = "tSortRow_1";

												currentComponent = "tSortRow_1_SortOut";

												/**
												 * [tSortRow_1_SortOut process_data_begin ] stop
												 */

												/**
												 * [tSortRow_1_SortOut process_data_end ] start
												 */

												currentVirtualComponent = "tSortRow_1";

												currentComponent = "tSortRow_1_SortOut";

												/**
												 * [tSortRow_1_SortOut process_data_end ] stop
												 */

											} // End of branch "out4"

											/**
											 * [tMap_5 process_data_end ] start
											 */

											currentComponent = "tMap_5";

											/**
											 * [tMap_5 process_data_end ] stop
											 */

										} // End of branch "out3"

										/**
										 * [tMap_4 process_data_end ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_end ] stop
										 */

									} // End of branch "out2"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "out"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/MSI/Desktop/BigData Project/inputdata/StudentsPerformance.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out3");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				out4Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparableout4Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out4");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/out.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_1.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("gender");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ethnicity");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("parental_level_of_education");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("lunch");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("test_preparation_course");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("math_score");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("reading_score");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("writing_score");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("average");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("rank");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("grade");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out6");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[11];

					public void addRow(String[] row) {

						for (int i = 0; i < 11; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 10 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 10 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[10] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "gender", "ethnicity", "parental_level_of_education", "lunch",
						"test_preparation_course", "math_score", "reading_score", "writing_score", "average", "rank",
						"grade", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out5");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out6Struct out6_tmp = new out6Struct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out5Struct out5_tmp = new out5Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				out4Struct[] array_tSortRow_1_SortIn = (out4Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				out4Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row2.gender = current_tSortRow_1_SortIn.gender;
					row2.ethnicity = current_tSortRow_1_SortIn.ethnicity;
					row2.parental_level_of_education = current_tSortRow_1_SortIn.parental_level_of_education;
					row2.lunch = current_tSortRow_1_SortIn.lunch;
					row2.test_preparation_course = current_tSortRow_1_SortIn.test_preparation_course;
					row2.math_score = current_tSortRow_1_SortIn.math_score;
					row2.reading_score = current_tSortRow_1_SortIn.reading_score;
					row2.writing_score = current_tSortRow_1_SortIn.writing_score;
					row2.average = current_tSortRow_1_SortIn.average;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
						// ###############################
						// # Output tables

						out5 = null;

// # Output table : 'out5'
						out5_tmp.gender = row2.gender;
						out5_tmp.ethnicity = row2.ethnicity;
						out5_tmp.parental_level_of_education = row2.parental_level_of_education;
						out5_tmp.lunch = row2.lunch;
						out5_tmp.test_preparation_course = row2.test_preparation_course;
						out5_tmp.math_score = row2.math_score;
						out5_tmp.reading_score = row2.reading_score;
						out5_tmp.writing_score = row2.writing_score;
						out5_tmp.average = row2.average;
						out5_tmp.rank = Numeric.sequence("s1", 1, 1);
						out5 = out5_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */

					/**
					 * [tMap_6 process_data_begin ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_begin ] stop
					 */
// Start of branch "out5"
					if (out5 != null) {

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "out5"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
							// ###############################
							// # Output tables

							out6 = null;

// # Output table : 'out6'
							out6_tmp.gender = out5.gender;
							out6_tmp.ethnicity = out5.ethnicity;
							out6_tmp.parental_level_of_education = out5.parental_level_of_education;
							out6_tmp.lunch = out5.lunch;
							out6_tmp.test_preparation_course = out5.test_preparation_course;
							out6_tmp.math_score = out5.math_score;
							out6_tmp.reading_score = out5.reading_score;
							out6_tmp.writing_score = out5.writing_score;
							out6_tmp.average = out5.average;
							out6_tmp.rank = out5.rank;
							out6_tmp.grade = (out5.average >= 90) ? "A"
									: (out5.average >= 80 && out5.average < 90) ? "B"
											: (out5.average >= 70 && out5.average < 80) ? "C"
													: (out5.average >= 60 && out5.average < 70) ? "D" : "F";
							;
							out6 = out6_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_7 = false;

						tos_count_tMap_7++;

						/**
						 * [tMap_7 main ] stop
						 */

						/**
						 * [tMap_7 process_data_begin ] start
						 */

						currentComponent = "tMap_7";

						/**
						 * [tMap_7 process_data_begin ] stop
						 */
// Start of branch "out6"
						if (out6 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "out6"

								);
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[11];

							if (out6.gender != null) { //
								row_tLogRow_1[0] = String.valueOf(out6.gender);

							} //

							if (out6.ethnicity != null) { //
								row_tLogRow_1[1] = String.valueOf(out6.ethnicity);

							} //

							if (out6.parental_level_of_education != null) { //
								row_tLogRow_1[2] = String.valueOf(out6.parental_level_of_education);

							} //

							if (out6.lunch != null) { //
								row_tLogRow_1[3] = String.valueOf(out6.lunch);

							} //

							if (out6.test_preparation_course != null) { //
								row_tLogRow_1[4] = String.valueOf(out6.test_preparation_course);

							} //

							if (out6.math_score != null) { //
								row_tLogRow_1[5] = String.valueOf(out6.math_score);

							} //

							if (out6.reading_score != null) { //
								row_tLogRow_1[6] = String.valueOf(out6.reading_score);

							} //

							if (out6.writing_score != null) { //
								row_tLogRow_1[7] = String.valueOf(out6.writing_score);

							} //

							if (out6.average != null) { //
								row_tLogRow_1[8] = FormatterUtils.formatUnwithE(out6.average);

							} //

							if (out6.rank != null) { //
								row_tLogRow_1[9] = String.valueOf(out6.rank);

							} //

							if (out6.grade != null) { //
								row_tLogRow_1[10] = String.valueOf(out6.grade);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							row3 = out6;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row3.gender != null) {
								sb_tFileOutputDelimited_1.append(row3.gender);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.ethnicity != null) {
								sb_tFileOutputDelimited_1.append(row3.ethnicity);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.parental_level_of_education != null) {
								sb_tFileOutputDelimited_1.append(row3.parental_level_of_education);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.lunch != null) {
								sb_tFileOutputDelimited_1.append(row3.lunch);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.test_preparation_course != null) {
								sb_tFileOutputDelimited_1.append(row3.test_preparation_course);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.math_score != null) {
								sb_tFileOutputDelimited_1.append(row3.math_score);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.reading_score != null) {
								sb_tFileOutputDelimited_1.append(row3.reading_score);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.writing_score != null) {
								sb_tFileOutputDelimited_1.append(row3.writing_score);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.average != null) {
								sb_tFileOutputDelimited_1.append(row3.average);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.rank != null) {
								sb_tFileOutputDelimited_1.append(row3.rank);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row3.grade != null) {
								sb_tFileOutputDelimited_1.append(row3.grade);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "out6"

						/**
						 * [tMap_7 process_data_end ] start
						 */

						currentComponent = "tMap_7";

						/**
						 * [tMap_7 process_data_end ] stop
						 */

					} // End of branch "out5"

					/**
					 * [tMap_6 process_data_end ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out5");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out6");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dataCleaning dataCleaningClass = new dataCleaning();

		int exitCode = dataCleaningClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = dataCleaning.class.getClassLoader()
					.getResourceAsStream("projet_examen/datacleaning_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = dataCleaning.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dataCleaning");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 197581 characters generated by Talend Open Studio for Data Integration on the
 * December 28, 2023, 10:22:18 AM CET
 ************************************************************************************************/